
Offline_Mood_Event_Logger_RTC_LCD_Switches_BitBanging_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001150  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080012f0  080012f0  000022f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800137c  0800137c  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800137c  0800137c  0000237c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001384  08001384  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001384  08001384  00002384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001388  08001388  00002388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800138c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  080013ec  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080013ec  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000176c  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c2  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000288  00000000  00000000  00004ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001cb  00000000  00000000  00005148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014adc  00000000  00000000  00005313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b48  00000000  00000000  00019def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b68  00000000  00000000  0001c937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f49f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d70  00000000  00000000  0009f4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000a0254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080012d8 	.word	0x080012d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080012d8 	.word	0x080012d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay>:

// ========== Time (Software RTC) ==========
volatile uint8_t seconds = 0, minutes = 0, hours = 10;

// ========== Delay ==========
void delay() {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 500; i++);
 8000286:	2300      	movs	r3, #0
 8000288:	607b      	str	r3, [r7, #4]
 800028a:	e002      	b.n	8000292 <delay+0x12>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3301      	adds	r3, #1
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000298:	dbf8      	blt.n	800028c <delay+0xc>
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <delay_ms>:
void delay_ms(uint32_t ms) {
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 3000; i++) __NOP();
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	e003      	b.n	80002be <delay_ms+0x16>
 80002b6:	bf00      	nop
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d3f3      	bcc.n	80002b6 <delay_ms+0xe>
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <I2C_Start>:

// ========== I2C Bit-Bang ==========
void I2C_Start() {
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
    SDA_HIGH(); SCL_HIGH(); delay();
 80002e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <I2C_Start+0x34>)
 80002e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002e6:	619a      	str	r2, [r3, #24]
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <I2C_Start+0x34>)
 80002ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002ee:	619a      	str	r2, [r3, #24]
 80002f0:	f7ff ffc6 	bl	8000280 <delay>
    SDA_LOW(); delay(); SCL_LOW(); delay();
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <I2C_Start+0x34>)
 80002f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80002fa:	619a      	str	r2, [r3, #24]
 80002fc:	f7ff ffc0 	bl	8000280 <delay>
 8000300:	4b03      	ldr	r3, [pc, #12]	@ (8000310 <I2C_Start+0x34>)
 8000302:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000306:	619a      	str	r2, [r3, #24]
 8000308:	f7ff ffba 	bl	8000280 <delay>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40020000 	.word	0x40020000

08000314 <I2C_Stop>:
void I2C_Stop() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    SDA_LOW(); SCL_HIGH(); delay(); SDA_HIGH(); delay();
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <I2C_Stop+0x28>)
 800031a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800031e:	619a      	str	r2, [r3, #24]
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <I2C_Stop+0x28>)
 8000322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000326:	619a      	str	r2, [r3, #24]
 8000328:	f7ff ffaa 	bl	8000280 <delay>
 800032c:	4b03      	ldr	r3, [pc, #12]	@ (800033c <I2C_Stop+0x28>)
 800032e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000332:	619a      	str	r2, [r3, #24]
 8000334:	f7ff ffa4 	bl	8000280 <delay>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40020000 	.word	0x40020000

08000340 <I2C_WriteBit>:
void I2C_WriteBit(uint8_t bit) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
    if (bit) SDA_HIGH(); else SDA_LOW();
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d004      	beq.n	800035a <I2C_WriteBit+0x1a>
 8000350:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <I2C_WriteBit+0x48>)
 8000352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000356:	619a      	str	r2, [r3, #24]
 8000358:	e003      	b.n	8000362 <I2C_WriteBit+0x22>
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <I2C_WriteBit+0x48>)
 800035c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000360:	619a      	str	r2, [r3, #24]
    delay(); SCL_HIGH(); delay(); SCL_LOW(); delay();
 8000362:	f7ff ff8d 	bl	8000280 <delay>
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <I2C_WriteBit+0x48>)
 8000368:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800036c:	619a      	str	r2, [r3, #24]
 800036e:	f7ff ff87 	bl	8000280 <delay>
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <I2C_WriteBit+0x48>)
 8000374:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000378:	619a      	str	r2, [r3, #24]
 800037a:	f7ff ff81 	bl	8000280 <delay>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40020000 	.word	0x40020000

0800038c <I2C_ReadBit>:
uint8_t I2C_ReadBit() {
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
    SDA_HIGH(); delay(); SCL_HIGH(); delay();
 8000392:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <I2C_ReadBit+0x44>)
 8000394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000398:	619a      	str	r2, [r3, #24]
 800039a:	f7ff ff71 	bl	8000280 <delay>
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <I2C_ReadBit+0x44>)
 80003a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003a4:	619a      	str	r2, [r3, #24]
 80003a6:	f7ff ff6b 	bl	8000280 <delay>
    uint8_t bit = SDA_READ;
 80003aa:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <I2C_ReadBit+0x44>)
 80003ac:	691b      	ldr	r3, [r3, #16]
 80003ae:	0a5b      	lsrs	r3, r3, #9
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	71fb      	strb	r3, [r7, #7]
    SCL_LOW(); delay();
 80003b8:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <I2C_ReadBit+0x44>)
 80003ba:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80003be:	619a      	str	r2, [r3, #24]
 80003c0:	f7ff ff5e 	bl	8000280 <delay>
    return bit;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40020000 	.word	0x40020000

080003d4 <I2C_WriteByte>:
uint8_t I2C_WriteByte(uint8_t byte) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
    for (int i = 7; i >= 0; i--) I2C_WriteBit((byte >> i) & 1);
 80003de:	2307      	movs	r3, #7
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	e00d      	b.n	8000400 <I2C_WriteByte+0x2c>
 80003e4:	79fa      	ldrb	r2, [r7, #7]
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	fa42 f303 	asr.w	r3, r2, r3
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ffa3 	bl	8000340 <I2C_WriteBit>
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2b00      	cmp	r3, #0
 8000404:	daee      	bge.n	80003e4 <I2C_WriteByte+0x10>
    return I2C_ReadBit(); // ACK
 8000406:	f7ff ffc1 	bl	800038c <I2C_ReadBit>
 800040a:	4603      	mov	r3, r0
}
 800040c:	4618      	mov	r0, r3
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <LCD_Enable>:

// ========== LCD I2C ==========
void LCD_Enable(uint8_t data) {
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
    I2C_Start(); I2C_WriteByte(LCD_ADDR);
 800041e:	f7ff ff5d 	bl	80002dc <I2C_Start>
 8000422:	204e      	movs	r0, #78	@ 0x4e
 8000424:	f7ff ffd6 	bl	80003d4 <I2C_WriteByte>
    I2C_WriteByte(data | 0x04); delay();
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ffcf 	bl	80003d4 <I2C_WriteByte>
 8000436:	f7ff ff23 	bl	8000280 <delay>
    I2C_WriteByte(data & ~0x04); delay();
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	f023 0304 	bic.w	r3, r3, #4
 8000440:	b2db      	uxtb	r3, r3
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ffc6 	bl	80003d4 <I2C_WriteByte>
 8000448:	f7ff ff1a 	bl	8000280 <delay>
    I2C_Stop();
 800044c:	f7ff ff62 	bl	8000314 <I2C_Stop>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}

08000458 <LCD_Send4Bits>:
void LCD_Send4Bits(uint8_t data) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
    LCD_Enable(data | 0x08);  // backlight
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	b2db      	uxtb	r3, r3
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ffd2 	bl	8000414 <LCD_Enable>
}
 8000470:	bf00      	nop
 8000472:	3708      	adds	r7, #8
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <LCD_SendCmd>:
void LCD_SendCmd(uint8_t cmd) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]
    LCD_Send4Bits(cmd & 0xF0);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f023 030f 	bic.w	r3, r3, #15
 8000488:	b2db      	uxtb	r3, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffe4 	bl	8000458 <LCD_Send4Bits>
    LCD_Send4Bits((cmd << 4) & 0xF0);
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	011b      	lsls	r3, r3, #4
 8000494:	b2db      	uxtb	r3, r3
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ffde 	bl	8000458 <LCD_Send4Bits>
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <LCD_SendData>:
void LCD_SendData(uint8_t data) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
    LCD_Enable((data & 0xF0) | 0x09);
 80004ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b2:	f023 030f 	bic.w	r3, r3, #15
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	f043 0309 	orr.w	r3, r3, #9
 80004bc:	b25b      	sxtb	r3, r3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ffa7 	bl	8000414 <LCD_Enable>
    LCD_Enable(((data << 4) & 0xF0) | 0x09);
 80004c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	f043 0309 	orr.w	r3, r3, #9
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff9c 	bl	8000414 <LCD_Enable>
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <LCD_Clear>:
void LCD_Clear() {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
    LCD_SendCmd(0x01);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f7ff ffc4 	bl	8000478 <LCD_SendCmd>
    for (volatile int i = 0; i < 30000; i++);
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	e002      	b.n	80004fc <LCD_Clear+0x18>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3301      	adds	r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000502:	4293      	cmp	r3, r2
 8000504:	ddf7      	ble.n	80004f6 <LCD_Clear+0x12>
}
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <LCD_Init>:
void LCD_Init() {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    delay_ms(50);
 8000514:	2032      	movs	r0, #50	@ 0x32
 8000516:	f7ff fec7 	bl	80002a8 <delay_ms>
    LCD_SendCmd(0x33);
 800051a:	2033      	movs	r0, #51	@ 0x33
 800051c:	f7ff ffac 	bl	8000478 <LCD_SendCmd>
    LCD_SendCmd(0x32);
 8000520:	2032      	movs	r0, #50	@ 0x32
 8000522:	f7ff ffa9 	bl	8000478 <LCD_SendCmd>
    LCD_SendCmd(0x28);
 8000526:	2028      	movs	r0, #40	@ 0x28
 8000528:	f7ff ffa6 	bl	8000478 <LCD_SendCmd>
    LCD_SendCmd(0x0C);
 800052c:	200c      	movs	r0, #12
 800052e:	f7ff ffa3 	bl	8000478 <LCD_SendCmd>
    LCD_SendCmd(0x06);
 8000532:	2006      	movs	r0, #6
 8000534:	f7ff ffa0 	bl	8000478 <LCD_SendCmd>
    LCD_SendCmd(0x01);
 8000538:	2001      	movs	r0, #1
 800053a:	f7ff ff9d 	bl	8000478 <LCD_SendCmd>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}

08000542 <LCD_SetCursor>:
void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	4603      	mov	r3, r0
 800054a:	460a      	mov	r2, r1
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	4613      	mov	r3, r2
 8000550:	71bb      	strb	r3, [r7, #6]
    LCD_SendCmd((row == 0 ? 0x80 : 0xC0) + col);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d101      	bne.n	800055c <LCD_SetCursor+0x1a>
 8000558:	2280      	movs	r2, #128	@ 0x80
 800055a:	e000      	b.n	800055e <LCD_SetCursor+0x1c>
 800055c:	22c0      	movs	r2, #192	@ 0xc0
 800055e:	79bb      	ldrb	r3, [r7, #6]
 8000560:	4413      	add	r3, r2
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff87 	bl	8000478 <LCD_SendCmd>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <LCD_Print>:
void LCD_Print(char* str) {
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
    while (*str) LCD_SendData(*str++);
 800057a:	e006      	b.n	800058a <LCD_Print+0x18>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	607a      	str	r2, [r7, #4]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff8d 	bl	80004a4 <LCD_SendData>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1f4      	bne.n	800057c <LCD_Print+0xa>
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <Display_Mood>:

// ========== Mood Functions ==========
void Display_Mood() {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    LCD_Clear();
 80005a0:	f7ff ffa0 	bl	80004e4 <LCD_Clear>
    LCD_Print("Mood: ");
 80005a4:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <Display_Mood+0x24>)
 80005a6:	f7ff ffe4 	bl	8000572 <LCD_Print>
    LCD_Print((char*)moods[current_mood]);
 80005aa:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <Display_Mood+0x28>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	461a      	mov	r2, r3
 80005b0:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <Display_Mood+0x2c>)
 80005b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff ffdb 	bl	8000572 <LCD_Print>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	08001304 	.word	0x08001304
 80005c4:	2000007c 	.word	0x2000007c
 80005c8:	20000000 	.word	0x20000000

080005cc <Toggle_Mood>:
void Toggle_Mood() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    current_mood = (current_mood + 1) % 3;
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <Toggle_Mood+0x2c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <Toggle_Mood+0x30>)
 80005d8:	fb83 3102 	smull	r3, r1, r3, r2
 80005dc:	17d3      	asrs	r3, r2, #31
 80005de:	1ac9      	subs	r1, r1, r3
 80005e0:	460b      	mov	r3, r1
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	440b      	add	r3, r1
 80005e6:	1ad1      	subs	r1, r2, r3
 80005e8:	b2ca      	uxtb	r2, r1
 80005ea:	4b03      	ldr	r3, [pc, #12]	@ (80005f8 <Toggle_Mood+0x2c>)
 80005ec:	701a      	strb	r2, [r3, #0]
    Display_Mood();
 80005ee:	f7ff ffd5 	bl	800059c <Display_Mood>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000007c 	.word	0x2000007c
 80005fc:	55555556 	.word	0x55555556

08000600 <Log_Event>:
void Log_Event() {
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b08a      	sub	sp, #40	@ 0x28
 8000604:	af02      	add	r7, sp, #8
    char line[32];
    LCD_Clear();
 8000606:	f7ff ff6d 	bl	80004e4 <LCD_Clear>
    LCD_Print("Event Logged:");
 800060a:	4814      	ldr	r0, [pc, #80]	@ (800065c <Log_Event+0x5c>)
 800060c:	f7ff ffb1 	bl	8000572 <LCD_Print>
    LCD_SetCursor(1, 0);
 8000610:	2100      	movs	r1, #0
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff95 	bl	8000542 <LCD_SetCursor>
    sprintf(line, "%02d:%02d:%02d %s", hours, minutes, seconds, moods[current_mood]);
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <Log_Event+0x60>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	461c      	mov	r4, r3
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <Log_Event+0x64>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	461d      	mov	r5, r3
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <Log_Event+0x68>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <Log_Event+0x6c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <Log_Event+0x70>)
 8000638:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800063c:	4638      	mov	r0, r7
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	9200      	str	r2, [sp, #0]
 8000642:	462b      	mov	r3, r5
 8000644:	4622      	mov	r2, r4
 8000646:	490b      	ldr	r1, [pc, #44]	@ (8000674 <Log_Event+0x74>)
 8000648:	f000 f9ae 	bl	80009a8 <siprintf>
    LCD_Print(line);
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff8f 	bl	8000572 <LCD_Print>
}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bdb0      	pop	{r4, r5, r7, pc}
 800065c:	0800130c 	.word	0x0800130c
 8000660:	2000000c 	.word	0x2000000c
 8000664:	2000007e 	.word	0x2000007e
 8000668:	2000007d 	.word	0x2000007d
 800066c:	2000007c 	.word	0x2000007c
 8000670:	20000000 	.word	0x20000000
 8000674:	0800131c 	.word	0x0800131c

08000678 <Update_Time>:

// ========== Time Update ==========
void Update_Time() {
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
    seconds++;
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <Update_Time+0x70>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	3301      	adds	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <Update_Time+0x70>)
 8000688:	701a      	strb	r2, [r3, #0]
    if (seconds >= 60) {
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <Update_Time+0x70>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b3b      	cmp	r3, #59	@ 0x3b
 8000692:	d923      	bls.n	80006dc <Update_Time+0x64>
        seconds = 0;
 8000694:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <Update_Time+0x70>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
        minutes++;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <Update_Time+0x74>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <Update_Time+0x74>)
 80006a6:	701a      	strb	r2, [r3, #0]
        if (minutes >= 60) {
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <Update_Time+0x74>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b3b      	cmp	r3, #59	@ 0x3b
 80006b0:	d914      	bls.n	80006dc <Update_Time+0x64>
            minutes = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <Update_Time+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
            hours = (hours + 1) % 24;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <Update_Time+0x78>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <Update_Time+0x7c>)
 80006c2:	fb83 1302 	smull	r1, r3, r3, r2
 80006c6:	1099      	asrs	r1, r3, #2
 80006c8:	17d3      	asrs	r3, r2, #31
 80006ca:	1ac9      	subs	r1, r1, r3
 80006cc:	460b      	mov	r3, r1
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	440b      	add	r3, r1
 80006d2:	00db      	lsls	r3, r3, #3
 80006d4:	1ad1      	subs	r1, r2, r3
 80006d6:	b2ca      	uxtb	r2, r1
 80006d8:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <Update_Time+0x78>)
 80006da:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	2000007d 	.word	0x2000007d
 80006ec:	2000007e 	.word	0x2000007e
 80006f0:	2000000c 	.word	0x2000000c
 80006f4:	2aaaaaab 	.word	0x2aaaaaab

080006f8 <Display_Time>:
void Display_Time() {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af02      	add	r7, sp, #8
    char timeStr[16];
    sprintf(timeStr, "%02d:%02d:%02d", hours, minutes, seconds);
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <Display_Time+0x4c>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <Display_Time+0x50>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	4619      	mov	r1, r3
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <Display_Time+0x54>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4638      	mov	r0, r7
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	460b      	mov	r3, r1
 800071a:	490d      	ldr	r1, [pc, #52]	@ (8000750 <Display_Time+0x58>)
 800071c:	f000 f944 	bl	80009a8 <siprintf>
    LCD_Clear();
 8000720:	f7ff fee0 	bl	80004e4 <LCD_Clear>
    LCD_Print("Time:");
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <Display_Time+0x5c>)
 8000726:	f7ff ff24 	bl	8000572 <LCD_Print>
    LCD_SetCursor(1, 0);
 800072a:	2100      	movs	r1, #0
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff ff08 	bl	8000542 <LCD_SetCursor>
    LCD_Print(timeStr);
 8000732:	463b      	mov	r3, r7
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff1c 	bl	8000572 <LCD_Print>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000000c 	.word	0x2000000c
 8000748:	2000007e 	.word	0x2000007e
 800074c:	2000007d 	.word	0x2000007d
 8000750:	08001330 	.word	0x08001330
 8000754:	08001340 	.word	0x08001340

08000758 <GPIO_Init>:

// ========== GPIO Init ==========
void GPIO_Init() {
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <GPIO_Init+0x58>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000760:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <GPIO_Init+0x58>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	6313      	str	r3, [r2, #48]	@ 0x30

    // PA8, PA9 as output for I2C
    GPIOA->MODER &= ~((3 << (8*2)) | (3 << (9*2)));
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <GPIO_Init+0x5c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <GPIO_Init+0x5c>)
 800076e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000772:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1 << (8*2)) | (1 << (9*2));
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <GPIO_Init+0x5c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <GPIO_Init+0x5c>)
 800077a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800077e:	6013      	str	r3, [r2, #0]

    // PA5, PA6 as input with pull-up
    GPIOA->MODER &= ~((3 << (5*2)) | (3 << (6*2)));
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <GPIO_Init+0x5c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <GPIO_Init+0x5c>)
 8000786:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800078a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~((3 << (5*2)) | (3 << (6*2)));
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <GPIO_Init+0x5c>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <GPIO_Init+0x5c>)
 8000792:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8000796:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (1 << (5*2)) | (1 << (6*2));
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <GPIO_Init+0x5c>)
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <GPIO_Init+0x5c>)
 800079e:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000

080007b8 <main>:

// ========== Main ==========
int main(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
    GPIO_Init();
 80007be:	f7ff ffcb 	bl	8000758 <GPIO_Init>
    LCD_Init();
 80007c2:	f7ff fea5 	bl	8000510 <LCD_Init>
    Display_Mood();
 80007c6:	f7ff fee9 	bl	800059c <Display_Mood>

    uint8_t prev_sw1 = 1, prev_sw2 = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	71fb      	strb	r3, [r7, #7]
 80007ce:	2301      	movs	r3, #1
 80007d0:	71bb      	strb	r3, [r7, #6]

    while (1) {
        // Read switches
        uint8_t sw1 = (GPIOA->IDR >> 5) & 1;
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <main+0x80>)
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	717b      	strb	r3, [r7, #5]
        uint8_t sw2 = (GPIOA->IDR >> 6) & 1;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <main+0x80>)
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	099b      	lsrs	r3, r3, #6
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	713b      	strb	r3, [r7, #4]

        // Log event on PA5 press
        if (prev_sw1 == 1 && sw1 == 0) {
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d108      	bne.n	8000806 <main+0x4e>
 80007f4:	797b      	ldrb	r3, [r7, #5]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d105      	bne.n	8000806 <main+0x4e>
            Log_Event();
 80007fa:	f7ff ff01 	bl	8000600 <Log_Event>
            delay_ms(1000);
 80007fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000802:	f7ff fd51 	bl	80002a8 <delay_ms>
        }

        // Toggle mood on PA6 press
        if (prev_sw2 == 1 && sw2 == 0) {
 8000806:	79bb      	ldrb	r3, [r7, #6]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d108      	bne.n	800081e <main+0x66>
 800080c:	793b      	ldrb	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d105      	bne.n	800081e <main+0x66>
            Toggle_Mood();
 8000812:	f7ff fedb 	bl	80005cc <Toggle_Mood>
            delay_ms(1000);
 8000816:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800081a:	f7ff fd45 	bl	80002a8 <delay_ms>
        }

        // Update software time every second
        Display_Time();
 800081e:	f7ff ff6b 	bl	80006f8 <Display_Time>
        delay_ms(1000);
 8000822:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000826:	f7ff fd3f 	bl	80002a8 <delay_ms>
        Update_Time();
 800082a:	f7ff ff25 	bl	8000678 <Update_Time>

        prev_sw1 = sw1;
 800082e:	797b      	ldrb	r3, [r7, #5]
 8000830:	71fb      	strb	r3, [r7, #7]
        prev_sw2 = sw2;
 8000832:	793b      	ldrb	r3, [r7, #4]
 8000834:	71bb      	strb	r3, [r7, #6]
    while (1) {
 8000836:	e7cc      	b.n	80007d2 <main+0x1a>
 8000838:	40020000 	.word	0x40020000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <NMI_Handler+0x4>

08000844 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <MemManage_Handler+0x4>

08000854 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	bf00      	nop
 8000862:	e7fd      	b.n	8000860 <UsageFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000892:	f000 f875 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	@ (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f000 f88e 	bl	80009ec <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	@ (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20020000 	.word	0x20020000
 80008fc:	00000400 	.word	0x00000400
 8000900:	20000080 	.word	0x20000080
 8000904:	200001d0 	.word	0x200001d0

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	@ (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800092c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000964 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000930:	f7ff ffea 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	@ (800096c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	@ (8000974 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	@ (8000978 <LoopFillZerobss+0x22>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095a:	f000 f84d 	bl	80009f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800095e:	f7ff ff2b 	bl	80007b8 <main>
  bx  lr    
 8000962:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000970:	0800138c 	.word	0x0800138c
  ldr r2, =_sbss
 8000974:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000978:	200001d0 	.word	0x200001d0

0800097c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	@ (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2000000d 	.word	0x2000000d
 80009a4:	20000084 	.word	0x20000084

080009a8 <siprintf>:
 80009a8:	b40e      	push	{r1, r2, r3}
 80009aa:	b510      	push	{r4, lr}
 80009ac:	b09d      	sub	sp, #116	@ 0x74
 80009ae:	ab1f      	add	r3, sp, #124	@ 0x7c
 80009b0:	9002      	str	r0, [sp, #8]
 80009b2:	9006      	str	r0, [sp, #24]
 80009b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80009b8:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <siprintf+0x3c>)
 80009ba:	9107      	str	r1, [sp, #28]
 80009bc:	9104      	str	r1, [sp, #16]
 80009be:	490a      	ldr	r1, [pc, #40]	@ (80009e8 <siprintf+0x40>)
 80009c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80009c4:	9105      	str	r1, [sp, #20]
 80009c6:	2400      	movs	r4, #0
 80009c8:	a902      	add	r1, sp, #8
 80009ca:	6800      	ldr	r0, [r0, #0]
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80009d0:	f000 f98c 	bl	8000cec <_svfiprintf_r>
 80009d4:	9b02      	ldr	r3, [sp, #8]
 80009d6:	701c      	strb	r4, [r3, #0]
 80009d8:	b01d      	add	sp, #116	@ 0x74
 80009da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009de:	b003      	add	sp, #12
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000010 	.word	0x20000010
 80009e8:	ffff0208 	.word	0xffff0208

080009ec <__errno>:
 80009ec:	4b01      	ldr	r3, [pc, #4]	@ (80009f4 <__errno+0x8>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000010 	.word	0x20000010

080009f8 <__libc_init_array>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000a30 <__libc_init_array+0x38>)
 80009fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000a34 <__libc_init_array+0x3c>)
 80009fe:	1b64      	subs	r4, r4, r5
 8000a00:	10a4      	asrs	r4, r4, #2
 8000a02:	2600      	movs	r6, #0
 8000a04:	42a6      	cmp	r6, r4
 8000a06:	d109      	bne.n	8000a1c <__libc_init_array+0x24>
 8000a08:	4d0b      	ldr	r5, [pc, #44]	@ (8000a38 <__libc_init_array+0x40>)
 8000a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a3c <__libc_init_array+0x44>)
 8000a0c:	f000 fc64 	bl	80012d8 <_init>
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	2600      	movs	r6, #0
 8000a16:	42a6      	cmp	r6, r4
 8000a18:	d105      	bne.n	8000a26 <__libc_init_array+0x2e>
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a20:	4798      	blx	r3
 8000a22:	3601      	adds	r6, #1
 8000a24:	e7ee      	b.n	8000a04 <__libc_init_array+0xc>
 8000a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2a:	4798      	blx	r3
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	e7f2      	b.n	8000a16 <__libc_init_array+0x1e>
 8000a30:	08001384 	.word	0x08001384
 8000a34:	08001384 	.word	0x08001384
 8000a38:	08001384 	.word	0x08001384
 8000a3c:	08001388 	.word	0x08001388

08000a40 <__retarget_lock_acquire_recursive>:
 8000a40:	4770      	bx	lr

08000a42 <__retarget_lock_release_recursive>:
 8000a42:	4770      	bx	lr

08000a44 <_free_r>:
 8000a44:	b538      	push	{r3, r4, r5, lr}
 8000a46:	4605      	mov	r5, r0
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d041      	beq.n	8000ad0 <_free_r+0x8c>
 8000a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a50:	1f0c      	subs	r4, r1, #4
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bfb8      	it	lt
 8000a56:	18e4      	addlt	r4, r4, r3
 8000a58:	f000 f8e0 	bl	8000c1c <__malloc_lock>
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad4 <_free_r+0x90>)
 8000a5e:	6813      	ldr	r3, [r2, #0]
 8000a60:	b933      	cbnz	r3, 8000a70 <_free_r+0x2c>
 8000a62:	6063      	str	r3, [r4, #4]
 8000a64:	6014      	str	r4, [r2, #0]
 8000a66:	4628      	mov	r0, r5
 8000a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a6c:	f000 b8dc 	b.w	8000c28 <__malloc_unlock>
 8000a70:	42a3      	cmp	r3, r4
 8000a72:	d908      	bls.n	8000a86 <_free_r+0x42>
 8000a74:	6820      	ldr	r0, [r4, #0]
 8000a76:	1821      	adds	r1, r4, r0
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	bf01      	itttt	eq
 8000a7c:	6819      	ldreq	r1, [r3, #0]
 8000a7e:	685b      	ldreq	r3, [r3, #4]
 8000a80:	1809      	addeq	r1, r1, r0
 8000a82:	6021      	streq	r1, [r4, #0]
 8000a84:	e7ed      	b.n	8000a62 <_free_r+0x1e>
 8000a86:	461a      	mov	r2, r3
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	b10b      	cbz	r3, 8000a90 <_free_r+0x4c>
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	d9fa      	bls.n	8000a86 <_free_r+0x42>
 8000a90:	6811      	ldr	r1, [r2, #0]
 8000a92:	1850      	adds	r0, r2, r1
 8000a94:	42a0      	cmp	r0, r4
 8000a96:	d10b      	bne.n	8000ab0 <_free_r+0x6c>
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	4401      	add	r1, r0
 8000a9c:	1850      	adds	r0, r2, r1
 8000a9e:	4283      	cmp	r3, r0
 8000aa0:	6011      	str	r1, [r2, #0]
 8000aa2:	d1e0      	bne.n	8000a66 <_free_r+0x22>
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	6053      	str	r3, [r2, #4]
 8000aaa:	4408      	add	r0, r1
 8000aac:	6010      	str	r0, [r2, #0]
 8000aae:	e7da      	b.n	8000a66 <_free_r+0x22>
 8000ab0:	d902      	bls.n	8000ab8 <_free_r+0x74>
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	602b      	str	r3, [r5, #0]
 8000ab6:	e7d6      	b.n	8000a66 <_free_r+0x22>
 8000ab8:	6820      	ldr	r0, [r4, #0]
 8000aba:	1821      	adds	r1, r4, r0
 8000abc:	428b      	cmp	r3, r1
 8000abe:	bf04      	itt	eq
 8000ac0:	6819      	ldreq	r1, [r3, #0]
 8000ac2:	685b      	ldreq	r3, [r3, #4]
 8000ac4:	6063      	str	r3, [r4, #4]
 8000ac6:	bf04      	itt	eq
 8000ac8:	1809      	addeq	r1, r1, r0
 8000aca:	6021      	streq	r1, [r4, #0]
 8000acc:	6054      	str	r4, [r2, #4]
 8000ace:	e7ca      	b.n	8000a66 <_free_r+0x22>
 8000ad0:	bd38      	pop	{r3, r4, r5, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001cc 	.word	0x200001cc

08000ad8 <sbrk_aligned>:
 8000ad8:	b570      	push	{r4, r5, r6, lr}
 8000ada:	4e0f      	ldr	r6, [pc, #60]	@ (8000b18 <sbrk_aligned+0x40>)
 8000adc:	460c      	mov	r4, r1
 8000ade:	6831      	ldr	r1, [r6, #0]
 8000ae0:	4605      	mov	r5, r0
 8000ae2:	b911      	cbnz	r1, 8000aea <sbrk_aligned+0x12>
 8000ae4:	f000 fba4 	bl	8001230 <_sbrk_r>
 8000ae8:	6030      	str	r0, [r6, #0]
 8000aea:	4621      	mov	r1, r4
 8000aec:	4628      	mov	r0, r5
 8000aee:	f000 fb9f 	bl	8001230 <_sbrk_r>
 8000af2:	1c43      	adds	r3, r0, #1
 8000af4:	d103      	bne.n	8000afe <sbrk_aligned+0x26>
 8000af6:	f04f 34ff 	mov.w	r4, #4294967295
 8000afa:	4620      	mov	r0, r4
 8000afc:	bd70      	pop	{r4, r5, r6, pc}
 8000afe:	1cc4      	adds	r4, r0, #3
 8000b00:	f024 0403 	bic.w	r4, r4, #3
 8000b04:	42a0      	cmp	r0, r4
 8000b06:	d0f8      	beq.n	8000afa <sbrk_aligned+0x22>
 8000b08:	1a21      	subs	r1, r4, r0
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f000 fb90 	bl	8001230 <_sbrk_r>
 8000b10:	3001      	adds	r0, #1
 8000b12:	d1f2      	bne.n	8000afa <sbrk_aligned+0x22>
 8000b14:	e7ef      	b.n	8000af6 <sbrk_aligned+0x1e>
 8000b16:	bf00      	nop
 8000b18:	200001c8 	.word	0x200001c8

08000b1c <_malloc_r>:
 8000b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b20:	1ccd      	adds	r5, r1, #3
 8000b22:	f025 0503 	bic.w	r5, r5, #3
 8000b26:	3508      	adds	r5, #8
 8000b28:	2d0c      	cmp	r5, #12
 8000b2a:	bf38      	it	cc
 8000b2c:	250c      	movcc	r5, #12
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	4606      	mov	r6, r0
 8000b32:	db01      	blt.n	8000b38 <_malloc_r+0x1c>
 8000b34:	42a9      	cmp	r1, r5
 8000b36:	d904      	bls.n	8000b42 <_malloc_r+0x26>
 8000b38:	230c      	movs	r3, #12
 8000b3a:	6033      	str	r3, [r6, #0]
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c18 <_malloc_r+0xfc>
 8000b46:	f000 f869 	bl	8000c1c <__malloc_lock>
 8000b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b4e:	461c      	mov	r4, r3
 8000b50:	bb44      	cbnz	r4, 8000ba4 <_malloc_r+0x88>
 8000b52:	4629      	mov	r1, r5
 8000b54:	4630      	mov	r0, r6
 8000b56:	f7ff ffbf 	bl	8000ad8 <sbrk_aligned>
 8000b5a:	1c43      	adds	r3, r0, #1
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	d158      	bne.n	8000c12 <_malloc_r+0xf6>
 8000b60:	f8d8 4000 	ldr.w	r4, [r8]
 8000b64:	4627      	mov	r7, r4
 8000b66:	2f00      	cmp	r7, #0
 8000b68:	d143      	bne.n	8000bf2 <_malloc_r+0xd6>
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d04b      	beq.n	8000c06 <_malloc_r+0xea>
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	4639      	mov	r1, r7
 8000b72:	4630      	mov	r0, r6
 8000b74:	eb04 0903 	add.w	r9, r4, r3
 8000b78:	f000 fb5a 	bl	8001230 <_sbrk_r>
 8000b7c:	4581      	cmp	r9, r0
 8000b7e:	d142      	bne.n	8000c06 <_malloc_r+0xea>
 8000b80:	6821      	ldr	r1, [r4, #0]
 8000b82:	1a6d      	subs	r5, r5, r1
 8000b84:	4629      	mov	r1, r5
 8000b86:	4630      	mov	r0, r6
 8000b88:	f7ff ffa6 	bl	8000ad8 <sbrk_aligned>
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	d03a      	beq.n	8000c06 <_malloc_r+0xea>
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	442b      	add	r3, r5
 8000b94:	6023      	str	r3, [r4, #0]
 8000b96:	f8d8 3000 	ldr.w	r3, [r8]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	bb62      	cbnz	r2, 8000bf8 <_malloc_r+0xdc>
 8000b9e:	f8c8 7000 	str.w	r7, [r8]
 8000ba2:	e00f      	b.n	8000bc4 <_malloc_r+0xa8>
 8000ba4:	6822      	ldr	r2, [r4, #0]
 8000ba6:	1b52      	subs	r2, r2, r5
 8000ba8:	d420      	bmi.n	8000bec <_malloc_r+0xd0>
 8000baa:	2a0b      	cmp	r2, #11
 8000bac:	d917      	bls.n	8000bde <_malloc_r+0xc2>
 8000bae:	1961      	adds	r1, r4, r5
 8000bb0:	42a3      	cmp	r3, r4
 8000bb2:	6025      	str	r5, [r4, #0]
 8000bb4:	bf18      	it	ne
 8000bb6:	6059      	strne	r1, [r3, #4]
 8000bb8:	6863      	ldr	r3, [r4, #4]
 8000bba:	bf08      	it	eq
 8000bbc:	f8c8 1000 	streq.w	r1, [r8]
 8000bc0:	5162      	str	r2, [r4, r5]
 8000bc2:	604b      	str	r3, [r1, #4]
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	f000 f82f 	bl	8000c28 <__malloc_unlock>
 8000bca:	f104 000b 	add.w	r0, r4, #11
 8000bce:	1d23      	adds	r3, r4, #4
 8000bd0:	f020 0007 	bic.w	r0, r0, #7
 8000bd4:	1ac2      	subs	r2, r0, r3
 8000bd6:	bf1c      	itt	ne
 8000bd8:	1a1b      	subne	r3, r3, r0
 8000bda:	50a3      	strne	r3, [r4, r2]
 8000bdc:	e7af      	b.n	8000b3e <_malloc_r+0x22>
 8000bde:	6862      	ldr	r2, [r4, #4]
 8000be0:	42a3      	cmp	r3, r4
 8000be2:	bf0c      	ite	eq
 8000be4:	f8c8 2000 	streq.w	r2, [r8]
 8000be8:	605a      	strne	r2, [r3, #4]
 8000bea:	e7eb      	b.n	8000bc4 <_malloc_r+0xa8>
 8000bec:	4623      	mov	r3, r4
 8000bee:	6864      	ldr	r4, [r4, #4]
 8000bf0:	e7ae      	b.n	8000b50 <_malloc_r+0x34>
 8000bf2:	463c      	mov	r4, r7
 8000bf4:	687f      	ldr	r7, [r7, #4]
 8000bf6:	e7b6      	b.n	8000b66 <_malloc_r+0x4a>
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	42a3      	cmp	r3, r4
 8000bfe:	d1fb      	bne.n	8000bf8 <_malloc_r+0xdc>
 8000c00:	2300      	movs	r3, #0
 8000c02:	6053      	str	r3, [r2, #4]
 8000c04:	e7de      	b.n	8000bc4 <_malloc_r+0xa8>
 8000c06:	230c      	movs	r3, #12
 8000c08:	6033      	str	r3, [r6, #0]
 8000c0a:	4630      	mov	r0, r6
 8000c0c:	f000 f80c 	bl	8000c28 <__malloc_unlock>
 8000c10:	e794      	b.n	8000b3c <_malloc_r+0x20>
 8000c12:	6005      	str	r5, [r0, #0]
 8000c14:	e7d6      	b.n	8000bc4 <_malloc_r+0xa8>
 8000c16:	bf00      	nop
 8000c18:	200001cc 	.word	0x200001cc

08000c1c <__malloc_lock>:
 8000c1c:	4801      	ldr	r0, [pc, #4]	@ (8000c24 <__malloc_lock+0x8>)
 8000c1e:	f7ff bf0f 	b.w	8000a40 <__retarget_lock_acquire_recursive>
 8000c22:	bf00      	nop
 8000c24:	200001c4 	.word	0x200001c4

08000c28 <__malloc_unlock>:
 8000c28:	4801      	ldr	r0, [pc, #4]	@ (8000c30 <__malloc_unlock+0x8>)
 8000c2a:	f7ff bf0a 	b.w	8000a42 <__retarget_lock_release_recursive>
 8000c2e:	bf00      	nop
 8000c30:	200001c4 	.word	0x200001c4

08000c34 <__ssputs_r>:
 8000c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c38:	688e      	ldr	r6, [r1, #8]
 8000c3a:	461f      	mov	r7, r3
 8000c3c:	42be      	cmp	r6, r7
 8000c3e:	680b      	ldr	r3, [r1, #0]
 8000c40:	4682      	mov	sl, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	4690      	mov	r8, r2
 8000c46:	d82d      	bhi.n	8000ca4 <__ssputs_r+0x70>
 8000c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000c50:	d026      	beq.n	8000ca0 <__ssputs_r+0x6c>
 8000c52:	6965      	ldr	r5, [r4, #20]
 8000c54:	6909      	ldr	r1, [r1, #16]
 8000c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c5a:	eba3 0901 	sub.w	r9, r3, r1
 8000c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c62:	1c7b      	adds	r3, r7, #1
 8000c64:	444b      	add	r3, r9
 8000c66:	106d      	asrs	r5, r5, #1
 8000c68:	429d      	cmp	r5, r3
 8000c6a:	bf38      	it	cc
 8000c6c:	461d      	movcc	r5, r3
 8000c6e:	0553      	lsls	r3, r2, #21
 8000c70:	d527      	bpl.n	8000cc2 <__ssputs_r+0x8e>
 8000c72:	4629      	mov	r1, r5
 8000c74:	f7ff ff52 	bl	8000b1c <_malloc_r>
 8000c78:	4606      	mov	r6, r0
 8000c7a:	b360      	cbz	r0, 8000cd6 <__ssputs_r+0xa2>
 8000c7c:	6921      	ldr	r1, [r4, #16]
 8000c7e:	464a      	mov	r2, r9
 8000c80:	f000 fae6 	bl	8001250 <memcpy>
 8000c84:	89a3      	ldrh	r3, [r4, #12]
 8000c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c8e:	81a3      	strh	r3, [r4, #12]
 8000c90:	6126      	str	r6, [r4, #16]
 8000c92:	6165      	str	r5, [r4, #20]
 8000c94:	444e      	add	r6, r9
 8000c96:	eba5 0509 	sub.w	r5, r5, r9
 8000c9a:	6026      	str	r6, [r4, #0]
 8000c9c:	60a5      	str	r5, [r4, #8]
 8000c9e:	463e      	mov	r6, r7
 8000ca0:	42be      	cmp	r6, r7
 8000ca2:	d900      	bls.n	8000ca6 <__ssputs_r+0x72>
 8000ca4:	463e      	mov	r6, r7
 8000ca6:	6820      	ldr	r0, [r4, #0]
 8000ca8:	4632      	mov	r2, r6
 8000caa:	4641      	mov	r1, r8
 8000cac:	f000 faa6 	bl	80011fc <memmove>
 8000cb0:	68a3      	ldr	r3, [r4, #8]
 8000cb2:	1b9b      	subs	r3, r3, r6
 8000cb4:	60a3      	str	r3, [r4, #8]
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	4433      	add	r3, r6
 8000cba:	6023      	str	r3, [r4, #0]
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	462a      	mov	r2, r5
 8000cc4:	f000 fad2 	bl	800126c <_realloc_r>
 8000cc8:	4606      	mov	r6, r0
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d1e0      	bne.n	8000c90 <__ssputs_r+0x5c>
 8000cce:	6921      	ldr	r1, [r4, #16]
 8000cd0:	4650      	mov	r0, sl
 8000cd2:	f7ff feb7 	bl	8000a44 <_free_r>
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	f8ca 3000 	str.w	r3, [sl]
 8000cdc:	89a3      	ldrh	r3, [r4, #12]
 8000cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ce2:	81a3      	strh	r3, [r4, #12]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	e7e9      	b.n	8000cbe <__ssputs_r+0x8a>
	...

08000cec <_svfiprintf_r>:
 8000cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	898b      	ldrh	r3, [r1, #12]
 8000cf4:	061b      	lsls	r3, r3, #24
 8000cf6:	b09d      	sub	sp, #116	@ 0x74
 8000cf8:	4607      	mov	r7, r0
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	d510      	bpl.n	8000d22 <_svfiprintf_r+0x36>
 8000d00:	690b      	ldr	r3, [r1, #16]
 8000d02:	b973      	cbnz	r3, 8000d22 <_svfiprintf_r+0x36>
 8000d04:	2140      	movs	r1, #64	@ 0x40
 8000d06:	f7ff ff09 	bl	8000b1c <_malloc_r>
 8000d0a:	6028      	str	r0, [r5, #0]
 8000d0c:	6128      	str	r0, [r5, #16]
 8000d0e:	b930      	cbnz	r0, 8000d1e <_svfiprintf_r+0x32>
 8000d10:	230c      	movs	r3, #12
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	b01d      	add	sp, #116	@ 0x74
 8000d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d1e:	2340      	movs	r3, #64	@ 0x40
 8000d20:	616b      	str	r3, [r5, #20]
 8000d22:	2300      	movs	r3, #0
 8000d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d26:	2320      	movs	r3, #32
 8000d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d30:	2330      	movs	r3, #48	@ 0x30
 8000d32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000ed0 <_svfiprintf_r+0x1e4>
 8000d36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d3a:	f04f 0901 	mov.w	r9, #1
 8000d3e:	4623      	mov	r3, r4
 8000d40:	469a      	mov	sl, r3
 8000d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d46:	b10a      	cbz	r2, 8000d4c <_svfiprintf_r+0x60>
 8000d48:	2a25      	cmp	r2, #37	@ 0x25
 8000d4a:	d1f9      	bne.n	8000d40 <_svfiprintf_r+0x54>
 8000d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8000d50:	d00b      	beq.n	8000d6a <_svfiprintf_r+0x7e>
 8000d52:	465b      	mov	r3, fp
 8000d54:	4622      	mov	r2, r4
 8000d56:	4629      	mov	r1, r5
 8000d58:	4638      	mov	r0, r7
 8000d5a:	f7ff ff6b 	bl	8000c34 <__ssputs_r>
 8000d5e:	3001      	adds	r0, #1
 8000d60:	f000 80a7 	beq.w	8000eb2 <_svfiprintf_r+0x1c6>
 8000d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d66:	445a      	add	r2, fp
 8000d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 809f 	beq.w	8000eb2 <_svfiprintf_r+0x1c6>
 8000d74:	2300      	movs	r3, #0
 8000d76:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d7e:	f10a 0a01 	add.w	sl, sl, #1
 8000d82:	9304      	str	r3, [sp, #16]
 8000d84:	9307      	str	r3, [sp, #28]
 8000d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d8c:	4654      	mov	r4, sl
 8000d8e:	2205      	movs	r2, #5
 8000d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d94:	484e      	ldr	r0, [pc, #312]	@ (8000ed0 <_svfiprintf_r+0x1e4>)
 8000d96:	f7ff fa23 	bl	80001e0 <memchr>
 8000d9a:	9a04      	ldr	r2, [sp, #16]
 8000d9c:	b9d8      	cbnz	r0, 8000dd6 <_svfiprintf_r+0xea>
 8000d9e:	06d0      	lsls	r0, r2, #27
 8000da0:	bf44      	itt	mi
 8000da2:	2320      	movmi	r3, #32
 8000da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000da8:	0711      	lsls	r1, r2, #28
 8000daa:	bf44      	itt	mi
 8000dac:	232b      	movmi	r3, #43	@ 0x2b
 8000dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000db2:	f89a 3000 	ldrb.w	r3, [sl]
 8000db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000db8:	d015      	beq.n	8000de6 <_svfiprintf_r+0xfa>
 8000dba:	9a07      	ldr	r2, [sp, #28]
 8000dbc:	4654      	mov	r4, sl
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f04f 0c0a 	mov.w	ip, #10
 8000dc4:	4621      	mov	r1, r4
 8000dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dca:	3b30      	subs	r3, #48	@ 0x30
 8000dcc:	2b09      	cmp	r3, #9
 8000dce:	d94b      	bls.n	8000e68 <_svfiprintf_r+0x17c>
 8000dd0:	b1b0      	cbz	r0, 8000e00 <_svfiprintf_r+0x114>
 8000dd2:	9207      	str	r2, [sp, #28]
 8000dd4:	e014      	b.n	8000e00 <_svfiprintf_r+0x114>
 8000dd6:	eba0 0308 	sub.w	r3, r0, r8
 8000dda:	fa09 f303 	lsl.w	r3, r9, r3
 8000dde:	4313      	orrs	r3, r2
 8000de0:	9304      	str	r3, [sp, #16]
 8000de2:	46a2      	mov	sl, r4
 8000de4:	e7d2      	b.n	8000d8c <_svfiprintf_r+0xa0>
 8000de6:	9b03      	ldr	r3, [sp, #12]
 8000de8:	1d19      	adds	r1, r3, #4
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	9103      	str	r1, [sp, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	bfbb      	ittet	lt
 8000df2:	425b      	neglt	r3, r3
 8000df4:	f042 0202 	orrlt.w	r2, r2, #2
 8000df8:	9307      	strge	r3, [sp, #28]
 8000dfa:	9307      	strlt	r3, [sp, #28]
 8000dfc:	bfb8      	it	lt
 8000dfe:	9204      	strlt	r2, [sp, #16]
 8000e00:	7823      	ldrb	r3, [r4, #0]
 8000e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e04:	d10a      	bne.n	8000e1c <_svfiprintf_r+0x130>
 8000e06:	7863      	ldrb	r3, [r4, #1]
 8000e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e0a:	d132      	bne.n	8000e72 <_svfiprintf_r+0x186>
 8000e0c:	9b03      	ldr	r3, [sp, #12]
 8000e0e:	1d1a      	adds	r2, r3, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	9203      	str	r2, [sp, #12]
 8000e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e18:	3402      	adds	r4, #2
 8000e1a:	9305      	str	r3, [sp, #20]
 8000e1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000ee0 <_svfiprintf_r+0x1f4>
 8000e20:	7821      	ldrb	r1, [r4, #0]
 8000e22:	2203      	movs	r2, #3
 8000e24:	4650      	mov	r0, sl
 8000e26:	f7ff f9db 	bl	80001e0 <memchr>
 8000e2a:	b138      	cbz	r0, 8000e3c <_svfiprintf_r+0x150>
 8000e2c:	9b04      	ldr	r3, [sp, #16]
 8000e2e:	eba0 000a 	sub.w	r0, r0, sl
 8000e32:	2240      	movs	r2, #64	@ 0x40
 8000e34:	4082      	lsls	r2, r0
 8000e36:	4313      	orrs	r3, r2
 8000e38:	3401      	adds	r4, #1
 8000e3a:	9304      	str	r3, [sp, #16]
 8000e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e40:	4824      	ldr	r0, [pc, #144]	@ (8000ed4 <_svfiprintf_r+0x1e8>)
 8000e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e46:	2206      	movs	r2, #6
 8000e48:	f7ff f9ca 	bl	80001e0 <memchr>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d036      	beq.n	8000ebe <_svfiprintf_r+0x1d2>
 8000e50:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <_svfiprintf_r+0x1ec>)
 8000e52:	bb1b      	cbnz	r3, 8000e9c <_svfiprintf_r+0x1b0>
 8000e54:	9b03      	ldr	r3, [sp, #12]
 8000e56:	3307      	adds	r3, #7
 8000e58:	f023 0307 	bic.w	r3, r3, #7
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	9303      	str	r3, [sp, #12]
 8000e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e62:	4433      	add	r3, r6
 8000e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e66:	e76a      	b.n	8000d3e <_svfiprintf_r+0x52>
 8000e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e6c:	460c      	mov	r4, r1
 8000e6e:	2001      	movs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <_svfiprintf_r+0xd8>
 8000e72:	2300      	movs	r3, #0
 8000e74:	3401      	adds	r4, #1
 8000e76:	9305      	str	r3, [sp, #20]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 0c0a 	mov.w	ip, #10
 8000e7e:	4620      	mov	r0, r4
 8000e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e84:	3a30      	subs	r2, #48	@ 0x30
 8000e86:	2a09      	cmp	r2, #9
 8000e88:	d903      	bls.n	8000e92 <_svfiprintf_r+0x1a6>
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0c6      	beq.n	8000e1c <_svfiprintf_r+0x130>
 8000e8e:	9105      	str	r1, [sp, #20]
 8000e90:	e7c4      	b.n	8000e1c <_svfiprintf_r+0x130>
 8000e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e96:	4604      	mov	r4, r0
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e7f0      	b.n	8000e7e <_svfiprintf_r+0x192>
 8000e9c:	ab03      	add	r3, sp, #12
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	462a      	mov	r2, r5
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <_svfiprintf_r+0x1f0>)
 8000ea4:	a904      	add	r1, sp, #16
 8000ea6:	4638      	mov	r0, r7
 8000ea8:	f3af 8000 	nop.w
 8000eac:	1c42      	adds	r2, r0, #1
 8000eae:	4606      	mov	r6, r0
 8000eb0:	d1d6      	bne.n	8000e60 <_svfiprintf_r+0x174>
 8000eb2:	89ab      	ldrh	r3, [r5, #12]
 8000eb4:	065b      	lsls	r3, r3, #25
 8000eb6:	f53f af2d 	bmi.w	8000d14 <_svfiprintf_r+0x28>
 8000eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ebc:	e72c      	b.n	8000d18 <_svfiprintf_r+0x2c>
 8000ebe:	ab03      	add	r3, sp, #12
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	462a      	mov	r2, r5
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <_svfiprintf_r+0x1f0>)
 8000ec6:	a904      	add	r1, sp, #16
 8000ec8:	4638      	mov	r0, r7
 8000eca:	f000 f879 	bl	8000fc0 <_printf_i>
 8000ece:	e7ed      	b.n	8000eac <_svfiprintf_r+0x1c0>
 8000ed0:	08001346 	.word	0x08001346
 8000ed4:	08001350 	.word	0x08001350
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	08000c35 	.word	0x08000c35
 8000ee0:	0800134c 	.word	0x0800134c

08000ee4 <_printf_common>:
 8000ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee8:	4616      	mov	r6, r2
 8000eea:	4698      	mov	r8, r3
 8000eec:	688a      	ldr	r2, [r1, #8]
 8000eee:	690b      	ldr	r3, [r1, #16]
 8000ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	bfb8      	it	lt
 8000ef8:	4613      	movlt	r3, r2
 8000efa:	6033      	str	r3, [r6, #0]
 8000efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f00:	4607      	mov	r7, r0
 8000f02:	460c      	mov	r4, r1
 8000f04:	b10a      	cbz	r2, 8000f0a <_printf_common+0x26>
 8000f06:	3301      	adds	r3, #1
 8000f08:	6033      	str	r3, [r6, #0]
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	0699      	lsls	r1, r3, #26
 8000f0e:	bf42      	ittt	mi
 8000f10:	6833      	ldrmi	r3, [r6, #0]
 8000f12:	3302      	addmi	r3, #2
 8000f14:	6033      	strmi	r3, [r6, #0]
 8000f16:	6825      	ldr	r5, [r4, #0]
 8000f18:	f015 0506 	ands.w	r5, r5, #6
 8000f1c:	d106      	bne.n	8000f2c <_printf_common+0x48>
 8000f1e:	f104 0a19 	add.w	sl, r4, #25
 8000f22:	68e3      	ldr	r3, [r4, #12]
 8000f24:	6832      	ldr	r2, [r6, #0]
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	42ab      	cmp	r3, r5
 8000f2a:	dc26      	bgt.n	8000f7a <_printf_common+0x96>
 8000f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f30:	6822      	ldr	r2, [r4, #0]
 8000f32:	3b00      	subs	r3, #0
 8000f34:	bf18      	it	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	0692      	lsls	r2, r2, #26
 8000f3a:	d42b      	bmi.n	8000f94 <_printf_common+0xb0>
 8000f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f40:	4641      	mov	r1, r8
 8000f42:	4638      	mov	r0, r7
 8000f44:	47c8      	blx	r9
 8000f46:	3001      	adds	r0, #1
 8000f48:	d01e      	beq.n	8000f88 <_printf_common+0xa4>
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	6922      	ldr	r2, [r4, #16]
 8000f4e:	f003 0306 	and.w	r3, r3, #6
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf02      	ittt	eq
 8000f56:	68e5      	ldreq	r5, [r4, #12]
 8000f58:	6833      	ldreq	r3, [r6, #0]
 8000f5a:	1aed      	subeq	r5, r5, r3
 8000f5c:	68a3      	ldr	r3, [r4, #8]
 8000f5e:	bf0c      	ite	eq
 8000f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f64:	2500      	movne	r5, #0
 8000f66:	4293      	cmp	r3, r2
 8000f68:	bfc4      	itt	gt
 8000f6a:	1a9b      	subgt	r3, r3, r2
 8000f6c:	18ed      	addgt	r5, r5, r3
 8000f6e:	2600      	movs	r6, #0
 8000f70:	341a      	adds	r4, #26
 8000f72:	42b5      	cmp	r5, r6
 8000f74:	d11a      	bne.n	8000fac <_printf_common+0xc8>
 8000f76:	2000      	movs	r0, #0
 8000f78:	e008      	b.n	8000f8c <_printf_common+0xa8>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	4652      	mov	r2, sl
 8000f7e:	4641      	mov	r1, r8
 8000f80:	4638      	mov	r0, r7
 8000f82:	47c8      	blx	r9
 8000f84:	3001      	adds	r0, #1
 8000f86:	d103      	bne.n	8000f90 <_printf_common+0xac>
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f90:	3501      	adds	r5, #1
 8000f92:	e7c6      	b.n	8000f22 <_printf_common+0x3e>
 8000f94:	18e1      	adds	r1, r4, r3
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	2030      	movs	r0, #48	@ 0x30
 8000f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f9e:	4422      	add	r2, r4
 8000fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fa8:	3302      	adds	r3, #2
 8000faa:	e7c7      	b.n	8000f3c <_printf_common+0x58>
 8000fac:	2301      	movs	r3, #1
 8000fae:	4622      	mov	r2, r4
 8000fb0:	4641      	mov	r1, r8
 8000fb2:	4638      	mov	r0, r7
 8000fb4:	47c8      	blx	r9
 8000fb6:	3001      	adds	r0, #1
 8000fb8:	d0e6      	beq.n	8000f88 <_printf_common+0xa4>
 8000fba:	3601      	adds	r6, #1
 8000fbc:	e7d9      	b.n	8000f72 <_printf_common+0x8e>
	...

08000fc0 <_printf_i>:
 8000fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc4:	7e0f      	ldrb	r7, [r1, #24]
 8000fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000fc8:	2f78      	cmp	r7, #120	@ 0x78
 8000fca:	4691      	mov	r9, r2
 8000fcc:	4680      	mov	r8, r0
 8000fce:	460c      	mov	r4, r1
 8000fd0:	469a      	mov	sl, r3
 8000fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000fd6:	d807      	bhi.n	8000fe8 <_printf_i+0x28>
 8000fd8:	2f62      	cmp	r7, #98	@ 0x62
 8000fda:	d80a      	bhi.n	8000ff2 <_printf_i+0x32>
 8000fdc:	2f00      	cmp	r7, #0
 8000fde:	f000 80d1 	beq.w	8001184 <_printf_i+0x1c4>
 8000fe2:	2f58      	cmp	r7, #88	@ 0x58
 8000fe4:	f000 80b8 	beq.w	8001158 <_printf_i+0x198>
 8000fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ff0:	e03a      	b.n	8001068 <_printf_i+0xa8>
 8000ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ff6:	2b15      	cmp	r3, #21
 8000ff8:	d8f6      	bhi.n	8000fe8 <_printf_i+0x28>
 8000ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8001000 <_printf_i+0x40>)
 8000ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001000:	08001059 	.word	0x08001059
 8001004:	0800106d 	.word	0x0800106d
 8001008:	08000fe9 	.word	0x08000fe9
 800100c:	08000fe9 	.word	0x08000fe9
 8001010:	08000fe9 	.word	0x08000fe9
 8001014:	08000fe9 	.word	0x08000fe9
 8001018:	0800106d 	.word	0x0800106d
 800101c:	08000fe9 	.word	0x08000fe9
 8001020:	08000fe9 	.word	0x08000fe9
 8001024:	08000fe9 	.word	0x08000fe9
 8001028:	08000fe9 	.word	0x08000fe9
 800102c:	0800116b 	.word	0x0800116b
 8001030:	08001097 	.word	0x08001097
 8001034:	08001125 	.word	0x08001125
 8001038:	08000fe9 	.word	0x08000fe9
 800103c:	08000fe9 	.word	0x08000fe9
 8001040:	0800118d 	.word	0x0800118d
 8001044:	08000fe9 	.word	0x08000fe9
 8001048:	08001097 	.word	0x08001097
 800104c:	08000fe9 	.word	0x08000fe9
 8001050:	08000fe9 	.word	0x08000fe9
 8001054:	0800112d 	.word	0x0800112d
 8001058:	6833      	ldr	r3, [r6, #0]
 800105a:	1d1a      	adds	r2, r3, #4
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6032      	str	r2, [r6, #0]
 8001060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001068:	2301      	movs	r3, #1
 800106a:	e09c      	b.n	80011a6 <_printf_i+0x1e6>
 800106c:	6833      	ldr	r3, [r6, #0]
 800106e:	6820      	ldr	r0, [r4, #0]
 8001070:	1d19      	adds	r1, r3, #4
 8001072:	6031      	str	r1, [r6, #0]
 8001074:	0606      	lsls	r6, r0, #24
 8001076:	d501      	bpl.n	800107c <_printf_i+0xbc>
 8001078:	681d      	ldr	r5, [r3, #0]
 800107a:	e003      	b.n	8001084 <_printf_i+0xc4>
 800107c:	0645      	lsls	r5, r0, #25
 800107e:	d5fb      	bpl.n	8001078 <_printf_i+0xb8>
 8001080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001084:	2d00      	cmp	r5, #0
 8001086:	da03      	bge.n	8001090 <_printf_i+0xd0>
 8001088:	232d      	movs	r3, #45	@ 0x2d
 800108a:	426d      	negs	r5, r5
 800108c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001090:	4858      	ldr	r0, [pc, #352]	@ (80011f4 <_printf_i+0x234>)
 8001092:	230a      	movs	r3, #10
 8001094:	e011      	b.n	80010ba <_printf_i+0xfa>
 8001096:	6821      	ldr	r1, [r4, #0]
 8001098:	6833      	ldr	r3, [r6, #0]
 800109a:	0608      	lsls	r0, r1, #24
 800109c:	f853 5b04 	ldr.w	r5, [r3], #4
 80010a0:	d402      	bmi.n	80010a8 <_printf_i+0xe8>
 80010a2:	0649      	lsls	r1, r1, #25
 80010a4:	bf48      	it	mi
 80010a6:	b2ad      	uxthmi	r5, r5
 80010a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80010aa:	4852      	ldr	r0, [pc, #328]	@ (80011f4 <_printf_i+0x234>)
 80010ac:	6033      	str	r3, [r6, #0]
 80010ae:	bf14      	ite	ne
 80010b0:	230a      	movne	r3, #10
 80010b2:	2308      	moveq	r3, #8
 80010b4:	2100      	movs	r1, #0
 80010b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010ba:	6866      	ldr	r6, [r4, #4]
 80010bc:	60a6      	str	r6, [r4, #8]
 80010be:	2e00      	cmp	r6, #0
 80010c0:	db05      	blt.n	80010ce <_printf_i+0x10e>
 80010c2:	6821      	ldr	r1, [r4, #0]
 80010c4:	432e      	orrs	r6, r5
 80010c6:	f021 0104 	bic.w	r1, r1, #4
 80010ca:	6021      	str	r1, [r4, #0]
 80010cc:	d04b      	beq.n	8001166 <_printf_i+0x1a6>
 80010ce:	4616      	mov	r6, r2
 80010d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80010d4:	fb03 5711 	mls	r7, r3, r1, r5
 80010d8:	5dc7      	ldrb	r7, [r0, r7]
 80010da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010de:	462f      	mov	r7, r5
 80010e0:	42bb      	cmp	r3, r7
 80010e2:	460d      	mov	r5, r1
 80010e4:	d9f4      	bls.n	80010d0 <_printf_i+0x110>
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d10b      	bne.n	8001102 <_printf_i+0x142>
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	07df      	lsls	r7, r3, #31
 80010ee:	d508      	bpl.n	8001102 <_printf_i+0x142>
 80010f0:	6923      	ldr	r3, [r4, #16]
 80010f2:	6861      	ldr	r1, [r4, #4]
 80010f4:	4299      	cmp	r1, r3
 80010f6:	bfde      	ittt	le
 80010f8:	2330      	movle	r3, #48	@ 0x30
 80010fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001102:	1b92      	subs	r2, r2, r6
 8001104:	6122      	str	r2, [r4, #16]
 8001106:	f8cd a000 	str.w	sl, [sp]
 800110a:	464b      	mov	r3, r9
 800110c:	aa03      	add	r2, sp, #12
 800110e:	4621      	mov	r1, r4
 8001110:	4640      	mov	r0, r8
 8001112:	f7ff fee7 	bl	8000ee4 <_printf_common>
 8001116:	3001      	adds	r0, #1
 8001118:	d14a      	bne.n	80011b0 <_printf_i+0x1f0>
 800111a:	f04f 30ff 	mov.w	r0, #4294967295
 800111e:	b004      	add	sp, #16
 8001120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	6023      	str	r3, [r4, #0]
 800112c:	4832      	ldr	r0, [pc, #200]	@ (80011f8 <_printf_i+0x238>)
 800112e:	2778      	movs	r7, #120	@ 0x78
 8001130:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	6831      	ldr	r1, [r6, #0]
 8001138:	061f      	lsls	r7, r3, #24
 800113a:	f851 5b04 	ldr.w	r5, [r1], #4
 800113e:	d402      	bmi.n	8001146 <_printf_i+0x186>
 8001140:	065f      	lsls	r7, r3, #25
 8001142:	bf48      	it	mi
 8001144:	b2ad      	uxthmi	r5, r5
 8001146:	6031      	str	r1, [r6, #0]
 8001148:	07d9      	lsls	r1, r3, #31
 800114a:	bf44      	itt	mi
 800114c:	f043 0320 	orrmi.w	r3, r3, #32
 8001150:	6023      	strmi	r3, [r4, #0]
 8001152:	b11d      	cbz	r5, 800115c <_printf_i+0x19c>
 8001154:	2310      	movs	r3, #16
 8001156:	e7ad      	b.n	80010b4 <_printf_i+0xf4>
 8001158:	4826      	ldr	r0, [pc, #152]	@ (80011f4 <_printf_i+0x234>)
 800115a:	e7e9      	b.n	8001130 <_printf_i+0x170>
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	f023 0320 	bic.w	r3, r3, #32
 8001162:	6023      	str	r3, [r4, #0]
 8001164:	e7f6      	b.n	8001154 <_printf_i+0x194>
 8001166:	4616      	mov	r6, r2
 8001168:	e7bd      	b.n	80010e6 <_printf_i+0x126>
 800116a:	6833      	ldr	r3, [r6, #0]
 800116c:	6825      	ldr	r5, [r4, #0]
 800116e:	6961      	ldr	r1, [r4, #20]
 8001170:	1d18      	adds	r0, r3, #4
 8001172:	6030      	str	r0, [r6, #0]
 8001174:	062e      	lsls	r6, r5, #24
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	d501      	bpl.n	800117e <_printf_i+0x1be>
 800117a:	6019      	str	r1, [r3, #0]
 800117c:	e002      	b.n	8001184 <_printf_i+0x1c4>
 800117e:	0668      	lsls	r0, r5, #25
 8001180:	d5fb      	bpl.n	800117a <_printf_i+0x1ba>
 8001182:	8019      	strh	r1, [r3, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	6123      	str	r3, [r4, #16]
 8001188:	4616      	mov	r6, r2
 800118a:	e7bc      	b.n	8001106 <_printf_i+0x146>
 800118c:	6833      	ldr	r3, [r6, #0]
 800118e:	1d1a      	adds	r2, r3, #4
 8001190:	6032      	str	r2, [r6, #0]
 8001192:	681e      	ldr	r6, [r3, #0]
 8001194:	6862      	ldr	r2, [r4, #4]
 8001196:	2100      	movs	r1, #0
 8001198:	4630      	mov	r0, r6
 800119a:	f7ff f821 	bl	80001e0 <memchr>
 800119e:	b108      	cbz	r0, 80011a4 <_printf_i+0x1e4>
 80011a0:	1b80      	subs	r0, r0, r6
 80011a2:	6060      	str	r0, [r4, #4]
 80011a4:	6863      	ldr	r3, [r4, #4]
 80011a6:	6123      	str	r3, [r4, #16]
 80011a8:	2300      	movs	r3, #0
 80011aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011ae:	e7aa      	b.n	8001106 <_printf_i+0x146>
 80011b0:	6923      	ldr	r3, [r4, #16]
 80011b2:	4632      	mov	r2, r6
 80011b4:	4649      	mov	r1, r9
 80011b6:	4640      	mov	r0, r8
 80011b8:	47d0      	blx	sl
 80011ba:	3001      	adds	r0, #1
 80011bc:	d0ad      	beq.n	800111a <_printf_i+0x15a>
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	079b      	lsls	r3, r3, #30
 80011c2:	d413      	bmi.n	80011ec <_printf_i+0x22c>
 80011c4:	68e0      	ldr	r0, [r4, #12]
 80011c6:	9b03      	ldr	r3, [sp, #12]
 80011c8:	4298      	cmp	r0, r3
 80011ca:	bfb8      	it	lt
 80011cc:	4618      	movlt	r0, r3
 80011ce:	e7a6      	b.n	800111e <_printf_i+0x15e>
 80011d0:	2301      	movs	r3, #1
 80011d2:	4632      	mov	r2, r6
 80011d4:	4649      	mov	r1, r9
 80011d6:	4640      	mov	r0, r8
 80011d8:	47d0      	blx	sl
 80011da:	3001      	adds	r0, #1
 80011dc:	d09d      	beq.n	800111a <_printf_i+0x15a>
 80011de:	3501      	adds	r5, #1
 80011e0:	68e3      	ldr	r3, [r4, #12]
 80011e2:	9903      	ldr	r1, [sp, #12]
 80011e4:	1a5b      	subs	r3, r3, r1
 80011e6:	42ab      	cmp	r3, r5
 80011e8:	dcf2      	bgt.n	80011d0 <_printf_i+0x210>
 80011ea:	e7eb      	b.n	80011c4 <_printf_i+0x204>
 80011ec:	2500      	movs	r5, #0
 80011ee:	f104 0619 	add.w	r6, r4, #25
 80011f2:	e7f5      	b.n	80011e0 <_printf_i+0x220>
 80011f4:	08001357 	.word	0x08001357
 80011f8:	08001368 	.word	0x08001368

080011fc <memmove>:
 80011fc:	4288      	cmp	r0, r1
 80011fe:	b510      	push	{r4, lr}
 8001200:	eb01 0402 	add.w	r4, r1, r2
 8001204:	d902      	bls.n	800120c <memmove+0x10>
 8001206:	4284      	cmp	r4, r0
 8001208:	4623      	mov	r3, r4
 800120a:	d807      	bhi.n	800121c <memmove+0x20>
 800120c:	1e43      	subs	r3, r0, #1
 800120e:	42a1      	cmp	r1, r4
 8001210:	d008      	beq.n	8001224 <memmove+0x28>
 8001212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800121a:	e7f8      	b.n	800120e <memmove+0x12>
 800121c:	4402      	add	r2, r0
 800121e:	4601      	mov	r1, r0
 8001220:	428a      	cmp	r2, r1
 8001222:	d100      	bne.n	8001226 <memmove+0x2a>
 8001224:	bd10      	pop	{r4, pc}
 8001226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800122a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800122e:	e7f7      	b.n	8001220 <memmove+0x24>

08001230 <_sbrk_r>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4d06      	ldr	r5, [pc, #24]	@ (800124c <_sbrk_r+0x1c>)
 8001234:	2300      	movs	r3, #0
 8001236:	4604      	mov	r4, r0
 8001238:	4608      	mov	r0, r1
 800123a:	602b      	str	r3, [r5, #0]
 800123c:	f7ff fb2e 	bl	800089c <_sbrk>
 8001240:	1c43      	adds	r3, r0, #1
 8001242:	d102      	bne.n	800124a <_sbrk_r+0x1a>
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	b103      	cbz	r3, 800124a <_sbrk_r+0x1a>
 8001248:	6023      	str	r3, [r4, #0]
 800124a:	bd38      	pop	{r3, r4, r5, pc}
 800124c:	200001c0 	.word	0x200001c0

08001250 <memcpy>:
 8001250:	440a      	add	r2, r1
 8001252:	4291      	cmp	r1, r2
 8001254:	f100 33ff 	add.w	r3, r0, #4294967295
 8001258:	d100      	bne.n	800125c <memcpy+0xc>
 800125a:	4770      	bx	lr
 800125c:	b510      	push	{r4, lr}
 800125e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001266:	4291      	cmp	r1, r2
 8001268:	d1f9      	bne.n	800125e <memcpy+0xe>
 800126a:	bd10      	pop	{r4, pc}

0800126c <_realloc_r>:
 800126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001270:	4607      	mov	r7, r0
 8001272:	4614      	mov	r4, r2
 8001274:	460d      	mov	r5, r1
 8001276:	b921      	cbnz	r1, 8001282 <_realloc_r+0x16>
 8001278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800127c:	4611      	mov	r1, r2
 800127e:	f7ff bc4d 	b.w	8000b1c <_malloc_r>
 8001282:	b92a      	cbnz	r2, 8001290 <_realloc_r+0x24>
 8001284:	f7ff fbde 	bl	8000a44 <_free_r>
 8001288:	4625      	mov	r5, r4
 800128a:	4628      	mov	r0, r5
 800128c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001290:	f000 f81a 	bl	80012c8 <_malloc_usable_size_r>
 8001294:	4284      	cmp	r4, r0
 8001296:	4606      	mov	r6, r0
 8001298:	d802      	bhi.n	80012a0 <_realloc_r+0x34>
 800129a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800129e:	d8f4      	bhi.n	800128a <_realloc_r+0x1e>
 80012a0:	4621      	mov	r1, r4
 80012a2:	4638      	mov	r0, r7
 80012a4:	f7ff fc3a 	bl	8000b1c <_malloc_r>
 80012a8:	4680      	mov	r8, r0
 80012aa:	b908      	cbnz	r0, 80012b0 <_realloc_r+0x44>
 80012ac:	4645      	mov	r5, r8
 80012ae:	e7ec      	b.n	800128a <_realloc_r+0x1e>
 80012b0:	42b4      	cmp	r4, r6
 80012b2:	4622      	mov	r2, r4
 80012b4:	4629      	mov	r1, r5
 80012b6:	bf28      	it	cs
 80012b8:	4632      	movcs	r2, r6
 80012ba:	f7ff ffc9 	bl	8001250 <memcpy>
 80012be:	4629      	mov	r1, r5
 80012c0:	4638      	mov	r0, r7
 80012c2:	f7ff fbbf 	bl	8000a44 <_free_r>
 80012c6:	e7f1      	b.n	80012ac <_realloc_r+0x40>

080012c8 <_malloc_usable_size_r>:
 80012c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012cc:	1f18      	subs	r0, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bfbc      	itt	lt
 80012d2:	580b      	ldrlt	r3, [r1, r0]
 80012d4:	18c0      	addlt	r0, r0, r3
 80012d6:	4770      	bx	lr

080012d8 <_init>:
 80012d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012da:	bf00      	nop
 80012dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012de:	bc08      	pop	{r3}
 80012e0:	469e      	mov	lr, r3
 80012e2:	4770      	bx	lr

080012e4 <_fini>:
 80012e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e6:	bf00      	nop
 80012e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ea:	bc08      	pop	{r3}
 80012ec:	469e      	mov	lr, r3
 80012ee:	4770      	bx	lr
